// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  phone     String?
  address   String?
  role      Role     @default(USER)
  status    Status   @default(ACTIVE)
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  umkmProducts UMKM[]
  reviews      Review[]
  submissions  Submission[]
  bookmarks    Bookmark[]
  eventJoins   EventParticipant[]

  @@map("users")
}

model Destination {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  category    String
  description String
  content     String?
  price       String
  facilities  String[]
  location    String
  latitude    Float?
  longitude   Float?
  images      String[]
  rating      Float    @default(0)
  totalReviews Int     @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  reviews   Review[]
  bookmarks Bookmark[]

  @@map("destinations")
}

model Event {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String
  content     String?
  category    String
  date        DateTime
  endDate     DateTime?
  location    String
  maxParticipants Int?
  currentParticipants Int @default(0)
  price       String?
  images      String[]
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  participants EventParticipant[]

  @@map("events")
}

model UMKM {
  id          String   @id @default(cuid())
  name        String
  category    String
  description String
  price       String
  stock       Int?
  images      String[]
  contact     String
  location    String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("umkm")
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String
  images    String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId        String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  destinationId String
  destination   Destination @relation(fields: [destinationId], references: [id], onDelete: Cascade)

  @@unique([userId, destinationId])
  @@map("reviews")
}

model Submission {
  id        String         @id @default(cuid())
  name      String
  email     String
  message   String
  type      SubmissionType
  status    SubmissionStatus @default(PENDING)
  response  String?
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  // Relations
  userId String?
  user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("submissions")
}

model Bookmark {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  // Relations
  userId        String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  destinationId String
  destination   Destination @relation(fields: [destinationId], references: [id], onDelete: Cascade)

  @@unique([userId, destinationId])
  @@map("bookmarks")
}

model EventParticipant {
  id        String   @id @default(cuid())
  status    ParticipantStatus @default(REGISTERED)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  eventId String
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId])
  @@map("event_participants")
}

model Analytics {
  id        String   @id @default(cuid())
  date      DateTime @default(now())
  pageViews Int      @default(0)
  visitors  Int      @default(0)
  page      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([date, page])
  @@map("analytics")
}

model Gallery {
  id        String   @id @default(cuid())
  title     String
  image     String
  category  String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("gallery")
}

// Enums
enum Role {
  ADMIN
  USER
}

enum Status {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum SubmissionType {
  GUESTBOOK
  VOLUNTEER
  FEEDBACK
  COMPLAINT
  BUSINESS
}

enum SubmissionStatus {
  PENDING
  REVIEWED
  RESPONDED
  CLOSED
}

enum ParticipantStatus {
  REGISTERED
  CONFIRMED
  ATTENDED
  CANCELLED
}
