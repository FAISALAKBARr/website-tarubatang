generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id           String       @id @default(cuid())
  email        String       @unique
  name         String
  password     String
  phone        String?
  address      String?
  role         Role         @default(USER)
  status       Status       @default(ACTIVE)
  avatar       String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  submissions  Submission[]
  umkmProducts UMKM[]

  @@map("users")
}

model Destination {
  id           String   @id @default(cuid())
  name         String
  slug         String   @unique
  category     String
  description  String
  content      String?
  price        String
  facilities   String[]
  location     String
  latitude     Float?
  longitude    Float?
  images       String[]
  rating       Float    @default(0)
  totalReviews Int      @default(0)
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("destinations")
}

model Event {
  id                  String    @id @default(cuid())
  name                String
  slug                String    @unique
  description         String
  content             String?
  category            String
  date                DateTime
  endDate             DateTime?
  location            String
  maxParticipants     Int?
  currentParticipants Int       @default(0)
  price               String?
  images              String[]
  isActive            Boolean   @default(true)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  @@map("events")
}

model UMKM {
  id          String   @id @default(cuid())
  name        String
  category    String
  description String
  price       String
  stock       Int?
  images      String[]
  contact     String
  location    String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("umkm")
}

model Submission {
  id        String           @id @default(cuid())
  name      String
  email     String
  message   String
  type      SubmissionType
  status    SubmissionStatus @default(PENDING)
  response  String?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  userId    String?
  user      User?            @relation(fields: [userId], references: [id])

  @@map("submissions")
}

model Analytics {
  id        String   @id @default(cuid())
  date      DateTime @default(now())
  pageViews Int      @default(0)
  visitors  Int      @default(0)
  page      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([date, page])
  @@map("analytics")
}

model Gallery {
  id          String   @id @default(cuid())
  title       String
  category    String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  images      String[]
  description String?

  @@map("gallery")
}

enum Role {
  ADMIN
  USER
}

enum Status {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum SubmissionType {
  GUESTBOOK
  VOLUNTEER
  FEEDBACK
  COMPLAINT
  BUSINESS
}

enum SubmissionStatus {
  PENDING
  REVIEWED
  RESPONDED
  CLOSED
}
